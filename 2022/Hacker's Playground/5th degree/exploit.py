import requests
import numpy as np
import scipy
import re
from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_data(self, data):
        if "Round" in data:
            print(data)
        elif "y = " in data:
            data = data.strip().replace(" ", "")
            print(data)
            coef = re.findall(r"([+-]?\d+)(x(\^\d)?)?", data)
            coef = list(map(lambda x: int(x[0]), coef))
            self.coef = coef 
        elif "le" in data:
            print(data)
            bounds = re.findall(r"-?\d+", data)
            self.bounds = list(map(int, bounds))

def calc(coef, x):
    acc = 0
    for (i, c) in enumerate(coef):
        up = 5 - i
        acc += c * x**up
    return acc

def solve(coef, bounds):
    p = np.poly1d(coef)
    print(p, bounds)

    mins = scipy.optimize.minimize_scalar(p, bounds=bounds, method='bounded')#, tol=1e-100)
    print(mins, round(mins.x))

    maxs = scipy.optimize.minimize_scalar(-1*p, bounds=bounds, method='bounded')#, tol=1e-100)
    print(maxs, round(maxs.x))

    return (calc(coef, round(mins.x)), calc(coef, round(maxs.x)))
    
def main():
    parser = MyHTMLParser()

    s = requests.session()
    URL = "http://5thdegree.sstf.site/chal"

    for _ in range(30):
        # Parse
        r = s.post(URL)
        content = r.content.decode()
        parser.feed(content)

        # Solve
        ans = solve(parser.coef, parser.bounds)
        print(ans)
        assert ans[0] < ans[1]

        # Check
        data = {"min": ans[0], "max": ans[1]}
        r = s.post(URL, data=data)
        if "harder" in r.content.decode():
            break

        if "SCTF" in r.content.decode():
            print(r.content.decode())

if __name__ == "__main__":
    main()